x-airflow-common:
  &airflow-common
  build: .
  networks:
    - default_network
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-airflow}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-airflow}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-airflow}/data:/opt/airflow/data
    - ${AIRFLOW_PROJ_DIR:-airflow}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-airflow}/config:/opt/airflow/config
    - ${SPARK_PROJ_DIR:-spark}/app:/opt/bitnami/spark/app
    - ${SPARK_PROJ_DIR:-spark}/resources:/opt/bitnami/spark/resources
    - ${SPARK_PROJ_DIR:-spark}/output:/opt/shared/output
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  # Postgres for Airflow metadata DB
  postgres:
    container_name: postgres
    image: postgres:13
    networks:
      - default_network
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - 5432:5432

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    user: "${AIRFLOW_UID}:0"
    # yamllint disable rule:line-length
    env_file:
      - .env
    command:
      - -c
      - |
        echo "UID: $(id -u), GID: $(id -g)"  # Add this line to debug UID
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/airflow/{logs,dags,plugins,config,data}
        mkdir -p /sources/spark/{app,resources,output}
        
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    # chmod -R 777 /sources/spark/{app,resources,output}
    # chown -R "${AIRFLOW_UID}:0" /sources/airflow/{logs,dags,plugins,config,data}
    # chown -R "${AIRFLOW_UID}:0" /sources/spark/{app,resources,output}
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''

    volumes:
      - ${AIRFLOW_PROJ_DIR:-airflow}:/sources/airflow
      - ${SPARK_PROJ_DIR:-spark}:/sources/spark

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # Spark Master (current stable Bitnami Spark version)
  spark-master:
    container_name: spark-master
    image: bitnami/spark:3.5.2
    user: "${AIRFLOW_UID}:0"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "8081:8080"     # maps host 8081 to Spark Master UI (8080 inside)
      - "7077:7077"
    volumes:
      - ${SPARK_PROJ_DIR:-spark}/app:/opt/bitnami/spark/app
      - ${SPARK_PROJ_DIR:-spark}/resources:/opt/bitnami/spark/resources
      - ${SPARK_PROJ_DIR:-spark}/output:/opt/shared/output
    networks:
      - default_network
    restart: always

  spark-worker-1:
    container_name: spark-worker-1
    image: bitnami/spark:3.5.2
    user: "${AIRFLOW_UID}:0"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    volumes:
      - ${SPARK_PROJ_DIR:-spark}/app:/opt/bitnami/spark/app
      - ${SPARK_PROJ_DIR:-spark}/resources:/opt/bitnami/spark/resources
      - ${SPARK_PROJ_DIR:-spark}/output:/opt/shared/output
    networks:
      - default_network
    restart: always

  jupyterlab:
    image: jupyter/pyspark-notebook:spark-3.5.0
    container_name: jupyterlab
    ports:
      - "8888:8888"
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    volumes:
      - ${SPARK_PROJ_DIR:-spark}/resources:/home/jovyan/work
    networks:
      - default_network
    depends_on:
      - spark-master

networks:
  default_network:
    name: docker_net

volumes:
  postgres-db-volume: